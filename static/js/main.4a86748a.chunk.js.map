{"version":3,"sources":["header/Header.js","main/navigation/Selection.js","main/navigation/Slider.js","main/navigation/Button.js","main/navigation/Navigation.js","main/movies/MovieListItem.js","main/movies/Movies.js","main/Main.js","movie/LoadingMovie.js","movie/Movie.js","NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Header","to","className","Selection","label","selectedOption","options","onSelection","value","onChange","map","option","key","id","name","Slider","range","props","type","data","this","min","max","step","minValue","maxValue","React","Component","Button","onClick","children","Navigation","genresURL","process","fetch","then","response","json","genres","unshift","setGenres","catch","error","console","log","genre","onGenreChange","sort_by_category","sort_by_categories","onSortByChange","year","rating","runtime","onSearchButtonClick","MovieListItem","movie","title","poster_path","release_date","vote_average","imgUrl","substring","src","alt","Movies","movies","page","onPageIncrease","onPageDecrease","Main","state","total_pages","moviesUrl","sort_by_ordering","Date","getFullYear","nextPage","setState","event","target","fetchMovies","url","storeMovies","results","result","vote_count","genre_ids","generateUrl","genreId","find","sort_by","category","nextProps","nextState","LoadingMovie","Movie","isLoading","movieId","match","params","movieUrl","backdrop_path","overview","releaseYear","backgroundStyle","backgroundImage","style","index","length","NotFound","App","basename","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gaAYeA,G,MARA,kBACX,gCACI,kBAAC,IAAD,CAAMC,GAAI,IAAKC,UAAU,SACrB,6C,qDCOGC,G,kBAXG,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,eAAgBC,EAAzB,EAAyBA,QAASC,EAAlC,EAAkCA,YAAlC,OAChB,yBAAKL,UAAU,aACb,+BAAQE,GACR,4BAAQI,MAAOH,EAAgBI,SAAUF,GACtCD,EAAQI,KAAK,SAAAC,GAAM,OAChB,4BAAQC,IAAKD,EAAOE,GAAIL,MAAOG,EAAOG,MAAOH,EAAOG,a,iBCsB/CC,G,uNAvBbN,SAAW,SAAAO,GACT,EAAKC,MAAMR,SAAS,CAClBS,KAAM,EAAKD,MAAME,KAAKf,MACtBI,MAAOQ,K,wEAGD,IAAD,EACkCI,KAAKH,MAAME,KAA5CE,EADD,EACCA,IAAKC,EADN,EACMA,IAAKC,EADX,EACWA,KAAMf,EADjB,EACiBA,MAAOJ,EADxB,EACwBA,MAC/B,OACE,yBAAKF,UAAU,UACb,+BAAQE,GACR,kBAAC,IAAD,CACEoB,SAAUH,EACVI,SAAUH,EACVC,KAAMA,EACNd,SAAUW,KAAKX,SACfD,MAAOA,S,GAjBIkB,IAAMC,YCKZC,G,MARA,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,SAAZ,OACb,yBAAK5B,UAAU,iBACb,4BAAQ2B,QAASA,GACdC,MC4CQC,E,4LA3CU,IAAD,OACVC,EAAS,gEAA4DC,mCAA5D,mBAEfC,MAAMF,GACDG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAhB,GACFA,EAAKmB,OAAOC,QAAQ,CAAC1B,GAAI,EAAGC,KAAM,QAClC,EAAKG,MAAMuB,UAAWrB,EAAKmB,WAE9BG,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,Q,+BAG1B,IAAD,EAC2HtB,KAAKH,MAA7H4B,EADH,EACGA,MAAOP,EADV,EACUA,OAAQQ,EADlB,EACkBA,cAAeC,EADjC,EACiCA,iBAAkBC,EADnD,EACmDA,mBAAoBC,EADvE,EACuEA,eAAgBxC,EADvF,EACuFA,SAAUyC,EADjG,EACiGA,KAAMC,EADvG,EACuGA,OAAQC,EAD/G,EAC+GA,QACpH,OACI,6BAASlD,UAAU,cACf,kBAAC,EAAD,CACIE,MAAM,QACNC,eAAgBwC,EAChBvC,QAASgC,EACT/B,YAAauC,IAGjB,kBAAC,EAAD,CAAQ3B,KAAM+B,EAAMzC,SAAUA,IAC9B,kBAAC,EAAD,CAAQU,KAAMgC,EAAQ1C,SAAUA,IAChC,kBAAC,EAAD,CAAQU,KAAMiC,EAAS3C,SAAUA,IAEjC,kBAAC,EAAD,CACIL,MAAM,UACNC,eAAgB0C,EAChBzC,QAAS0C,EACTzC,YAAa0C,IAGjB,kBAAC,EAAD,CAAQpB,QAAST,KAAKH,MAAMoC,qBAA5B,e,GAnCS3B,IAAMC,WCyBhB2B,G,YA3BO,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf1C,EAAuD0C,EAAvD1C,GAAI2C,EAAmDD,EAAnDC,MAAOC,EAA4CF,EAA5CE,YAAaC,EAA+BH,EAA/BG,aAAcC,EAAiBJ,EAAjBI,aACxCC,EAAM,0CAAsCH,GAC5CP,EAAOQ,EAAaG,UAAU,EAAG,GAEvC,OACE,wBAAI3D,UAAU,cACZ,kBAAC,IAAD,CAAMD,GAAE,iBAAYY,GAAMX,UAAU,aAClC,yBAAK4D,IAAKF,EAAQG,IAAKP,IACvB,yBAAKtD,UAAU,qBACb,4BAAKsD,GACH,6BAAStD,UAAU,iBACjB,yBAAKA,UAAU,cACb,0BAAMA,UAAU,SAAhB,QACA,8BAAOgD,IAET,yBAAKhD,UAAU,gBACb,0BAAMA,UAAU,SAAhB,UACA,8BAAOyD,UCDRK,EAhBA,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAQC,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,eAAgBC,EAAhC,EAAgCA,eAAhC,OACb,iCACE,wBAAIlE,UAAU,UACX+D,EAAOvD,KAAK,SAAA6C,GAAK,OAChB,kBAAC,EAAD,CAAe3C,IAAK2C,EAAM1C,GAAI0C,MAAOA,QAIzC,yBAAKrD,UAAU,cACb,kBAAC,EAAD,CAAQ2B,QAASuC,GAAjB,YACA,6CAAeF,IACf,kBAAC,EAAD,CAAQrC,QAASsC,GAAjB,WCuJSE,E,2MAjKbC,MAAQ,CACNL,OAAQ,GACRM,YAAa,EACbL,KAAM,EACNM,UAAU,uDAAD,OAAyDvC,mCAAzD,uNACTY,MAAO,MACPP,OAAQ,GACRS,iBAAkB,aAClBC,mBAAoB,CAChB,CAACnC,GAAI,EAAGC,KAAM,aAAcN,MAAO,cACnC,CAACK,GAAI,EAAGC,KAAM,eAAgBN,MAAO,wBACrC,CAACK,GAAI,EAAGC,KAAM,QAASN,MAAO,kBAC9B,CAACK,GAAI,EAAGC,KAAM,SAAUN,MAAO,iBACnCiE,iBAAkB,OAClBvB,KAAM,CACJ9C,MAAO,OACPiB,IAAK,KACLC,KAAK,IAAIoD,MAAOC,cAChBpD,KAAM,EACNf,MAAO,CAAEa,KAAK,IAAIqD,MAAOC,cAAgB,GAAIrD,KAAK,IAAIoD,MAAOC,gBAE/DxB,OAAQ,CACN/C,MAAO,SACPiB,IAAK,EACLC,IAAK,GACLC,KAAM,EACNf,MAAO,CAAEa,IAAK,EAAGC,IAAK,KAExB8B,QAAS,CACPhD,MAAO,UACPiB,IAAK,EACLC,IAAK,IACLC,KAAM,GACNf,MAAO,CAAEa,IAAK,GAAIC,IAAK,O,EAiB7B6C,eAAiB,WAAO,IAAD,EACS,EAAKG,MAC7BM,EAFe,EACbV,KACgB,EACpBU,GAHiB,EACPL,aAGZ,EAAKM,SAAS,CAAEX,KAAMU,K,EAI1BR,eAAiB,WACf,IAAMQ,EAAW,EAAKN,MAAMJ,KAAO,EAC9BU,EAAW,GACd,EAAKC,SAAS,CAAEX,KAAMU,K,EAI1B9B,cAAgB,SAAAgC,GACd,EAAKD,SAAS,CAAEhC,MAAOiC,EAAMC,OAAOvE,S,EAGtCyC,eAAiB,SAAA6B,GACf,EAAKD,SAAS,CAAE9B,iBAAkB+B,EAAMC,OAAOvE,S,EAGjDgC,UAAY,SAAAF,GACV,EAAKuC,SAAS,CAAEvC,Y,EAGlB7B,SAAW,SAAAU,GACP,EAAK0D,SAAL,eACK1D,EAAKD,KADV,eAEW,EAAKoD,MAAMnD,EAAKD,MAF3B,CAGQV,MAAOW,EAAKX,W,EAKxBwE,YAAc,SAACC,GACb/C,MAAM+C,GACH9C,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAhB,GAAI,OAAI,EAAK+D,YAAY/D,MAC9BsB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,O,EAGhCwC,YAAc,SAAA/D,GACZ,IAAM8C,EAAS9C,EAAKgE,QAAQzE,KAAK,SAAA0E,GAE/B,MAAO,CAAEC,WAD8ED,EAA9EC,WACYxE,GADkEuE,EAAlEvE,GACIyE,UAD8DF,EAA9DE,UACW7B,YADmD2B,EAAnD3B,YACaD,MADsC4B,EAAtC5B,MACOG,aAD+ByB,EAA/BzB,aACcD,aADiB0B,EAAjB1B,iBAIxE,EAAKmB,SAAS,CAAEZ,SAAQM,YAAapD,EAAKoD,e,EAG5CgB,YAAc,WAAO,IAGfC,EAHc,EACmE,EAAKlB,MAAnFhC,EADW,EACXA,OAAQU,EADG,EACHA,mBAAoByB,EADjB,EACiBA,iBAAkBvB,EADnC,EACmCA,KAAMC,EADzC,EACyCA,OAAQC,EADjD,EACiDA,QAASc,EAD1D,EAC0DA,KAGpD,QAArB,EAAKI,MAAMzB,MACZ2C,EAAU,GAIVA,EADsBlD,EAAOmD,MAAM,SAAA5C,GAAK,OAAIA,EAAM/B,OAAS,EAAKwD,MAAMzB,SAC9ChC,GAG1B,IACM6E,EADc1C,EAAmByC,MAAM,SAAAE,GAAQ,OAAIA,EAAS7E,OAAS,EAAKwD,MAAMvB,oBAC1DvC,MAAQ,IAAMiE,EAEpCD,EAAY,iEACLvC,mCADK,yCAGLyD,EAHK,2BAIDF,EAJC,wCAKYtC,EAAK1C,MAAMa,IALvB,8CAMY6B,EAAK1C,MAAMc,IANvB,sCAOI6B,EAAO3C,MAAMa,IAPjB,gCAQI8B,EAAO3C,MAAMc,IARjB,gCASI8B,EAAQ5C,MAAMa,IATlB,gCAUI+B,EAAQ5C,MAAMc,IAVlB,oBAWR4C,GAEV,EAAKW,SAAS,CAAEL,e,EAGlBnB,oBAAsB,WACpB,EAAKwB,SAAS,CAACX,KAAM,IACrB,EAAKqB,e,mFAjGLnE,KAAK4D,YAAY5D,KAAKkD,MAAME,a,iDAGHoB,EAAWC,GAChCzE,KAAKkD,MAAME,YAAcqB,EAAUrB,WACrCpD,KAAK4D,YAAYa,EAAUrB,WAEzBpD,KAAKkD,MAAMJ,OAAS2B,EAAU3B,MAChC9C,KAAKmE,gB,+BA6FL,OACE,6BAASrF,UAAU,QACf,kBAAC,EAAD,eACEO,SAAUW,KAAKX,SACfqC,cAAe1B,KAAK0B,cACpBN,UAAWpB,KAAKoB,UAChBS,eAAgB7B,KAAK6B,eACrBI,oBAAqBjC,KAAKiC,qBACtBjC,KAAKkD,QAGX,kBAAC,EAAD,CACEL,OAAQ7C,KAAKkD,MAAML,OACnBC,KAAM9C,KAAKkD,MAAMJ,KACjBC,eAAgB/C,KAAK+C,eACrBC,eAAgBhD,KAAKgD,sB,GA3Jd1C,IAAMC,WCDVmE,EAFM,kBAAM,8CC+DZC,G,iNA5DbzB,MAAQ,CACN0B,WAAW,EACXzC,MAAO,I,mFAGY,IAAD,OACV0C,EAAY7E,KAAKH,MAAMiF,MAAMC,OAA7BF,QACFG,EAAQ,6CAAyCH,EAAzC,4DACd/D,MAAMkE,GACHjE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAhB,GAAI,OAAI,EAAK0D,SAAS,CAAEtB,MAAOpC,EAAM6E,WAAW,OACrDvD,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,SAAUF,Q,+BAGhC,IACAsD,EAAc5E,KAAKkD,MAAnB0B,UADD,EAEiF5E,KAAKkD,MAAMf,MAA3FC,EAFD,EAECA,MAAO6C,EAFR,EAEQA,cAAe3C,EAFvB,EAEuBA,aAAcpB,EAFrC,EAEqCA,OAAQgE,EAF7C,EAE6CA,SAAU3C,EAFvD,EAEuDA,aAAcP,EAFrE,EAEqEA,QAEtEmD,EAAc7C,EAAeA,EAAaG,UAAU,EAAG,GAAK,KAE5D2C,EAAkB,CAAEC,gBAAgB,uCAAD,OAAyCJ,EAAzC,MAEzC,OACE,yBAAKnG,UAAU,cAAf,IACE8F,EAAY,kBAAC,EAAD,MACR,6BACE,yBAAK9F,UAAU,cAAcwG,MAAOF,IACpC,yBAAKtG,UAAU,iBACb,4BACGsD,EACD,mCAAU+C,EAAV,OAEF,6BAASrG,UAAU,UAChBoC,EAAO5B,KAAI,SAACmC,EAAO8D,GAAR,OACV,yBAAK/F,IAAKiC,EAAMhC,IACd,8BAAOgC,EAAM/B,MACZ6F,EAAQrE,EAAOsE,OAAS,GACvB,0BAAM1G,UAAU,aAAhB,UAKR,sCAEE,8BAAOyD,IAET,uCAEE,wCAAUP,EAAV,UAEF,wCACA,2BAAIkD,U,GApDA5E,IAAMC,YCMXkF,EAPE,kBACf,6BACE,6EACA,kBAAC,IAAD,CAAM5G,GAAG,KAAT,qCCgBW6G,EAfH,WACV,OACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW7C,IACjC,kBAAC,IAAD,CAAO4C,KAAK,kBAAkBC,UAAWnB,IACzC,kBAAC,IAAD,CAAOmB,UAAWL,QCHRM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpB,MACvB,2DCZNqB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1F,MAAK,SAAA2F,GACjCA,EAAaC,kB","file":"static/js/main.4a86748a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\nimport { Link } from \"react-router-dom\";\n\nconst Header = () => (\n    <header>\n        <Link to={'/'} className=\"title\">\n            <h1>Film Find</h1>\n        </Link>\n    </header>\n)\n\nexport default Header;","import React from 'react';\nimport \"./Selection.css\";\n\nconst Selection = ({label, selectedOption, options, onSelection }) => (\n  <div className=\"selection\">\n    <label>{label}</label>\n    <select value={selectedOption} onChange={onSelection}>\n      {options.map( option => (\n          <option key={option.id} value={option.name}>{option.name}</option>\n      ))}\n    </select>\n  </div>\n);\n\nexport default Selection;\n","import React from \"react\";\nimport InputRange from \"react-input-range\";\n\nimport 'react-input-range/lib/css/index.css';\nimport \"./Slider.css\"\n\nclass Slider extends React.Component {\n  onChange = range => {\n    this.props.onChange({\n      type: this.props.data.label,\n      value: range\n    });\n  }\n  render() {\n    const { min, max, step, value, label } = this.props.data;\n    return (\n      <div className=\"slider\">\n        <label>{label}</label>\n        <InputRange\n          minValue={min}\n          maxValue={max}\n          step={step}\n          onChange={this.onChange}\n          value={value}\n        />\n      </div>\n    )\n  }\n} \n\nexport default Slider;\n","import React from \"react\";\nimport \"./Button.css\"\n\nconst Button = ({ onClick, children }) => (\n  <div className=\"search-button\">\n    <button onClick={onClick}>\n      {children}\n    </button>\n  </div>\n)\n\nexport default Button;","import React from \"react\";\nimport \"./Navigation.css\";\nimport Selection from \"./Selection\";\nimport Slider from \"./Slider.js\"\nimport Button from \"./Button\";\n\nclass Navigation extends React.Component {\n    componentDidMount() {\n        const genresURL = `https://api.themoviedb.org/3/genre/movie/list?api_key=${process.env.REACT_APP_TMDB_API_KEY}&language=en-US`\n\n        fetch(genresURL)\n            .then(response => response.json())\n            .then(data => {\n                data.genres.unshift({id: 0, name: \"All\"});\n                this.props.setGenres( data.genres );\n            })\n            .catch(error => console.log(error));\n    }\n    \n    render() {\n        const { genre, genres, onGenreChange, sort_by_category, sort_by_categories, onSortByChange, onChange, year, rating, runtime } = this.props;\n        return (\n            <section className=\"navigation\">\n                <Selection\n                    label='Genre'\n                    selectedOption={genre}\n                    options={genres}\n                    onSelection={onGenreChange} \n                />\n\n                <Slider data={year} onChange={onChange} />\n                <Slider data={rating} onChange={onChange} />\n                <Slider data={runtime} onChange={onChange} />\n\n                <Selection\n                    label='Sort By'\n                    selectedOption={sort_by_category}\n                    options={sort_by_categories}\n                    onSelection={onSortByChange} \n                />\n\n                <Button onClick={this.props.onSearchButtonClick}>\n                    Search\n                </Button>\n\n            </section>\n        )\n    }\n}\n\nexport default Navigation;","import React from \"react\";\nimport \"./MovieListItem.css\";\nimport { Link } from \"react-router-dom\";\n\nconst MovieListItem = ({ movie }) => {\n  const { id, title, poster_path, release_date, vote_average } = movie;\n  const imgUrl = `https://image.tmdb.org/t/p/w342/${poster_path}`;\n  const year = release_date.substring(0, 4);\n\n  return (\n    <li className=\"movie-item\">\n      <Link to={`/movie/${id}`} className=\"thumbnail\">\n        <img src={imgUrl} alt={title} />\n        <div className=\"movie-description\">\n          <h2>{title}</h2>\n            <section className=\"movie-details\">\n              <div className=\"movie-year\">\n                <span className=\"title\">Year</span>\n                <span>{year}</span>\n              </div>\n              <div className=\"movie-rating\">\n                <span className=\"title\">Rating</span>\n                <span>{vote_average}</span>\n              </div>\n            </section>\n        </div>\n      </Link>\n    </li>\n  );\n};\n\nexport default MovieListItem;","import React from \"react\";\nimport \"./Movies.css\";\nimport MovieListItem from \"./MovieListItem\";\nimport Button from \"../navigation/Button\";\n\nconst Movies = ({movies, page, onPageIncrease, onPageDecrease}) => (\n  <section>\n    <ul className=\"movies\">\n      {movies.map( movie => (\n        <MovieListItem key={movie.id} movie={movie} />\n      ))}\n    </ul>\n\n    <div className=\"pagination\">\n      <Button onClick={onPageDecrease}>Previous</Button>\n      <span>{`Page ${page}`}</span>\n      <Button onClick={onPageIncrease}>Next</Button>\n    </div>\n  </section>\n)\n\nexport default Movies;","import React from \"react\";\nimport \"./Main.css\"\nimport Navigation from \"./navigation/Navigation\";\nimport Movies from \"./movies/Movies\";\n\nclass Main extends React.Component {\n  state = {\n    movies: [],\n    total_pages: 1,\n    page: 1,\n    moviesUrl: `https://api.themoviedb.org/3/discover/movie?api_key=${process.env.REACT_APP_TMDB_API_KEY}&language=en-US&sort_by=popularity.desc&with_genres=&primary_release_date.gte=1990-01-01&primary_release_date.lte=2020-12-31&vote_average.gte=8&vote_average.lte=10&with_runtime.gte=60&with_runtime.lte=240&page=1`,\n    genre: \"All\",\n    genres: [],\n    sort_by_category: 'Popularity',\n    sort_by_categories: [\n        {id: 0, name: 'Popularity', value: 'popularity'},\n        {id: 1, name: 'Release Date', value: 'primary_release_date'},\n        {id: 2, name: 'Title', value: 'original_title'},\n        {id: 3, name: 'Rating', value: 'vote_average'}],\n    sort_by_ordering: 'desc',\n    year: {\n      label: \"year\",\n      min: 1950,\n      max: new Date().getFullYear(),\n      step: 1,\n      value: { min: new Date().getFullYear() - 30, max: new Date().getFullYear() }\n    },\n    rating: {\n      label: \"rating\",\n      min: 0,\n      max: 10,\n      step: 1,\n      value: { min: 8, max: 10 }\n    },\n    runtime: {\n      label: \"runtime\",\n      min: 0,\n      max: 300,\n      step: 15,\n      value: { min: 60, max: 240 }\n    }\n}\n\ncomponentDidMount() {\n  this.fetchMovies(this.state.moviesUrl);\n}\n\nUNSAFE_componentWillUpdate(nextProps, nextState) {\n  if (this.state.moviesUrl !== nextState.moviesUrl) {\n    this.fetchMovies(nextState.moviesUrl);\n  }\n  if (this.state.page !== nextState.page) {\n    this.generateUrl();\n  }\n}\n\nonPageIncrease = () => {\n  const { page, total_pages } = this.state\n  const nextPage = page + 1;\n  if (nextPage <= total_pages) {\n    this.setState({ page: nextPage })\n  }\n}\n\nonPageDecrease = () => {\n  const nextPage = this.state.page - 1;\n  if ( nextPage > 0 ) {\n    this.setState({ page: nextPage })\n  }\n}\n\nonGenreChange = event => {\n  this.setState({ genre: event.target.value });\n}\n\nonSortByChange = event => {\n  this.setState({ sort_by_category: event.target.value });\n}\n\nsetGenres = genres => {\n  this.setState({ genres });\n}\n\nonChange = data => {\n    this.setState({\n        [data.type]: {\n            ...this.state[data.type],\n            value: data.value\n        }\n    })\n}\n\nfetchMovies = (url) => {\n  fetch(url)\n    .then(response => response.json())\n    .then(data => this.storeMovies(data))\n    .catch(error => console.log(error));\n}\n\nstoreMovies = data => {\n  const movies = data.results.map( result => {\n    const  { vote_count, id, genre_ids, poster_path, title, vote_average, release_date } = result;\n    return { vote_count, id, genre_ids, poster_path, title, vote_average, release_date };\n  });\n\n  this.setState({ movies, total_pages: data.total_pages });\n}\n\ngenerateUrl = () => {\n  const {genres, sort_by_categories, sort_by_ordering, year, rating, runtime, page } = this.state;\n\n  let genreId;\n  if(this.state.genre === \"All\") {\n    genreId = \"\";\n  }\n  else {\n    const selectedGenre = genres.find( genre => genre.name === this.state.genre);\n    genreId = selectedGenre.id;\n  }\n\n  const sort_by_obj = sort_by_categories.find( category => category.name === this.state.sort_by_category);\n  const sort_by = sort_by_obj.value + \".\" + sort_by_ordering;\n\n  const moviesUrl = `https://api.themoviedb.org/3/discover/movie?` +\n    `api_key=${process.env.REACT_APP_TMDB_API_KEY}&` +\n    `language=en-US&` +\n    `sort_by=${sort_by}&` +\n    `with_genres=${genreId}&` +\n    `primary_release_date.gte=${year.value.min}-01-01&` +\n    `primary_release_date.lte=${year.value.max}-12-31&` +\n    `vote_average.gte=${rating.value.min}&` +\n    `vote_average.lte=${rating.value.max}&` +\n    `with_runtime.gte=${runtime.value.min}&` +\n    `with_runtime.lte=${runtime.value.max}&` +\n    `page=${page}`;\n\n  this.setState({ moviesUrl });\n}\n\nonSearchButtonClick = () => {\n  this.setState({page: 1});\n  this.generateUrl();\n}\n\n  render() {\n    return (\n      <section className=\"main\">\n          <Navigation\n            onChange={this.onChange}\n            onGenreChange={this.onGenreChange}\n            setGenres={this.setGenres}\n            onSortByChange={this.onSortByChange}\n            onSearchButtonClick={this.onSearchButtonClick}\n            {...this.state}\n          />\n\n          <Movies\n            movies={this.state.movies}\n            page={this.state.page}\n            onPageIncrease={this.onPageIncrease}\n            onPageDecrease={this.onPageDecrease}\n          />\n      </section>\n    )\n  }\n}\n\nexport default Main;","import React from \"react\";\n\nconst LoadingMovie = () => <h2>Loading Movie</h2>\n\nexport default LoadingMovie;","import React from \"react\";\nimport LoadingMovie from \"./LoadingMovie\";\nimport \"./Movie.css\"\n\nclass Movie extends React.Component {\n  state = {\n    isLoading: true,\n    movie: {}\n  }\n\n  componentDidMount() {\n    const { movieId } = this.props.match.params;\n    const movieUrl = `https://api.themoviedb.org/3/movie/${movieId}?api_key=651925d45022d1ae658063b443c99784&language=en-US`;\n    fetch(movieUrl)\n      .then(response => response.json())\n      .then(data => this.setState({ movie: data, isLoading: false }))\n      .catch(error => console.log(\"Error:\", error));\n  }\n\n  render() {\n    const { isLoading } = this.state;\n    const { title, backdrop_path, release_date, genres, overview, vote_average, runtime } = this.state.movie;\n\n    const releaseYear = release_date ? release_date.substring(0, 4) : null;\n\n    const backgroundStyle = { backgroundImage: `url(http://image.tmdb.org/t/p/w1280/${backdrop_path})` };\n\n    return (\n      <div className=\"movie-page\"> { \n        isLoading ? <LoadingMovie />\n          : <div>\n              <div className=\"movie-image\" style={backgroundStyle} />\n              <div className=\"movie-details\">\n                <h1>\n                  {title}\n                  <span> ({ releaseYear }) </span>\n                </h1>\n                <section className=\"genres\">\n                  {genres.map((genre, index) => (\n                    <div key={genre.id}>\n                      <span>{genre.name}</span>\n                      {index < genres.length - 1 && (\n                        <span className=\"separator\">|</span>\n                      )}\n                    </div>\n                  ))}\n                </section>\n                <h5>\n                  Rating:\n                  <span>{vote_average}</span>\n                </h5>\n                <h5>\n                  Runtime:\n                  <span>{`${runtime} min`}</span>\n                </h5>\n                <h4>Overview</h4>\n                <p>{overview}</p>\n              </div>\n            </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default Movie;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst NotFound = () => (\n  <div>\n    <h3>We couldn't find what you were looking for :(</h3>\n    <Link to=\"/\">Here you can browse some movies</Link>\n  </div>\n);\n\nexport default NotFound;","import React from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\"\nimport Header from \"./header/Header\";\nimport Main from \"./main/Main\";\nimport Movie from \"./movie/Movie\";\nimport NotFound from \"./NotFound\";\n\nconst App = () => {\n  return (\n    <HashRouter basename='/'>\n      <div>\n        <Header />\n        <Switch>\n          <Route exact path='/' component={Main} />\n          <Route path=\"/movie/:movieId\" component={Movie} />\n          <Route component={NotFound} />\n        </Switch>\n      </div>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}