{"version":3,"sources":["header/Header.js","main/navigation/Selection.js","main/navigation/Slider.js","main/navigation/Button.js","main/navigation/Navigation.js","main/movies/MovieListItem.js","main/movies/Movies.js","main/Main.js","movie/LoadingMovie.js","movie/Movie.js","NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Header","Selection","genre","genres","onGenreChange","className","value","onChange","map","key","id","name","Slider","range","props","type","data","label","this","min","max","step","minValue","maxValue","React","Component","Button","onClick","children","Navigation","genresURL","process","fetch","then","response","json","setGenres","catch","error","console","log","year","rating","runtime","onSearchButtonClick","MovieListItem","movie","title","poster_path","release_date","vote_average","imgUrl","substring","to","src","alt","Movies","movies","page","onPageIncrease","onPageDecrease","Main","state","total_pages","moviesUrl","nextPage","setState","event","target","fetchMovies","url","storeMovies","results","result","vote_count","genre_ids","generateUrl","genreId","find","nextProps","nextState","LoadingMovie","Movie","isLoading","movieId","match","params","movieUrl","backdrop_path","overview","releaseYear","backgroundStyle","backgroundImage","style","index","length","NotFound","App","basename","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iaASeA,G,MANA,kBACX,gCACI,4C,oDCSOC,G,kBAXG,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,cAAjB,OACd,yBAAKC,UAAU,aACb,wCACA,4BAAQC,MAAOJ,EAAOK,SAAUH,GAC7BD,EAAOK,KAAK,SAAAN,GAAK,OACd,4BAAQO,IAAKP,EAAMQ,GAAIJ,MAAOJ,EAAMS,MAAOT,EAAMS,a,iBCsB9CC,G,uNAvBbL,SAAW,SAAAM,GACT,EAAKC,MAAMP,SAAS,CAClBQ,KAAM,EAAKD,MAAME,KAAKC,MACtBX,MAAOO,K,wEAGD,IAAD,EACkCK,KAAKJ,MAAME,KAA5CG,EADD,EACCA,IAAKC,EADN,EACMA,IAAKC,EADX,EACWA,KAAMf,EADjB,EACiBA,MAAOW,EADxB,EACwBA,MAC/B,OACE,yBAAKZ,UAAU,UACb,+BAAQY,GACR,kBAAC,IAAD,CACEK,SAAUH,EACVI,SAAUH,EACVC,KAAMA,EACNd,SAAUW,KAAKX,SACfD,MAAOA,S,GAjBIkB,IAAMC,YCKZC,G,MARA,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,SAAZ,OACb,yBAAKvB,UAAU,iBACb,4BAAQsB,QAASA,GACdC,MCgCQC,E,4LA/BU,IAAD,OACVC,EAAS,gEAA4DC,mCAA5D,mBACfC,MAAMF,GACHG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAjB,GAAI,OAAI,EAAKF,MAAMsB,UAAWpB,EAAKb,WACxCkC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,Q,+BAGxB,IAAD,EACqEpB,KAAKJ,MAAvEZ,EADH,EACGA,MAAOC,EADV,EACUA,OAAQC,EADlB,EACkBA,cAAeG,EADjC,EACiCA,SAAUkC,EAD3C,EAC2CA,KAAMC,EADjD,EACiDA,OAAQC,EADzD,EACyDA,QAC9D,OACI,6BAAStC,UAAU,cACf,kBAAC,EAAD,CACIH,MAAOA,EACPC,OAAQA,EACRC,cAAeA,IAGnB,kBAAC,EAAD,CAAQY,KAAMyB,EAAMlC,SAAUA,IAC9B,kBAAC,EAAD,CAAQS,KAAM0B,EAAQnC,SAAUA,IAChC,kBAAC,EAAD,CAAQS,KAAM2B,EAASpC,SAAUA,IAEjC,kBAAC,EAAD,CAAQoB,QAAST,KAAKJ,MAAM8B,qBAA5B,e,GAvBSpB,IAAMC,WCyBhBoB,G,YA3BO,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACfpC,EAAuDoC,EAAvDpC,GAAIqC,EAAmDD,EAAnDC,MAAOC,EAA4CF,EAA5CE,YAAaC,EAA+BH,EAA/BG,aAAcC,EAAiBJ,EAAjBI,aACxCC,EAAM,0CAAsCH,GAC5CP,EAAOQ,EAAaG,UAAU,EAAG,GAEvC,OACE,wBAAI/C,UAAU,cACZ,kBAAC,IAAD,CAAMgD,GAAE,iBAAY3C,GAAML,UAAU,aAClC,yBAAKiD,IAAKH,EAAQI,IAAKR,IACvB,yBAAK1C,UAAU,qBACb,4BAAK0C,GACH,6BAAS1C,UAAU,iBACjB,yBAAKA,UAAU,cACb,0BAAMA,UAAU,SAAhB,QACA,8BAAOoC,IAET,yBAAKpC,UAAU,gBACb,0BAAMA,UAAU,SAAhB,UACA,8BAAO6C,UCDRM,EAhBA,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAQC,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,eAAgBC,EAAhC,EAAgCA,eAAhC,OACb,iCACE,wBAAIvD,UAAU,UACXoD,EAAOjD,KAAK,SAAAsC,GAAK,OAChB,kBAAC,EAAD,CAAerC,IAAKqC,EAAMpC,GAAIoC,MAAOA,QAIzC,yBAAKzC,UAAU,cACb,kBAAC,EAAD,CAAQsB,QAASiC,GAAjB,YACA,6CAAeF,IACf,kBAAC,EAAD,CAAQ/B,QAASgC,GAAjB,WCgISE,E,2MA1IbC,MAAQ,CACNL,OAAQ,GACRM,YAAa,EACbL,KAAM,EACNM,UAAU,uDAAD,OAAyDjC,mCAAzD,0FACT7B,MAAO,SACPC,OAAQ,GACRsC,KAAM,CACJxB,MAAO,OACPE,IAAK,KACLC,IAAK,KACLC,KAAM,EACNf,MAAO,CAAEa,IAAK,IAAMC,IAAK,OAE3BsB,OAAQ,CACNzB,MAAO,SACPE,IAAK,EACLC,IAAK,GACLC,KAAM,EACNf,MAAO,CAAEa,IAAK,EAAGC,IAAK,KAExBuB,QAAS,CACP1B,MAAO,UACPE,IAAK,EACLC,IAAK,IACLC,KAAM,GACNf,MAAO,CAAEa,IAAK,GAAIC,IAAK,O,EAiB7BuC,eAAiB,WAAO,IAAD,EACS,EAAKG,MAC7BG,EAFe,EACbP,KACgB,EACpBO,GAHiB,EACPF,aAGZ,EAAKG,SAAS,CAAER,KAAMO,K,EAI1BL,eAAiB,WACf,IAAMK,EAAW,EAAKH,MAAMJ,KAAO,EAC9BO,EAAW,GACd,EAAKC,SAAS,CAAER,KAAMO,K,EAI1B7D,cAAgB,SAAA+D,GACd,EAAKD,SAAS,CAAEhE,MAAOiE,EAAMC,OAAO9D,S,EAGtC8B,UAAY,SAAAjC,GACV,EAAK+D,SAAS,CAAE/D,Y,EAGlBI,SAAW,SAAAS,GACP,EAAKkD,SAAL,eACKlD,EAAKD,KADV,eAEW,EAAK+C,MAAM9C,EAAKD,MAF3B,CAGQT,MAAOU,EAAKV,W,EAKxB+D,YAAc,SAACC,GACbtC,MAAMsC,GACHrC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAjB,GAAI,OAAI,EAAKuD,YAAYvD,MAC9BqB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,O,EAGhCiC,YAAc,SAAAvD,GACZ,IAAMyC,EAASzC,EAAKwD,QAAQhE,KAAK,SAAAiE,GAE/B,MAAO,CAAEC,WAD8ED,EAA9EC,WACYhE,GADkE+D,EAAlE/D,GACIiE,UAD8DF,EAA9DE,UACW3B,YADmDyB,EAAnDzB,YACaD,MADsC0B,EAAtC1B,MACOG,aAD+BuB,EAA/BvB,aACcD,aADiBwB,EAAjBxB,iBAIxE,EAAKiB,SAAS,CAAET,SAAQM,YAAa/C,EAAK+C,e,EAG5Ca,YAAc,WAAO,IAAD,EAC6B,EAAKd,MAA7C3D,EADW,EACXA,OAAQsC,EADG,EACHA,KAAMC,EADH,EACGA,OAAQC,EADX,EACWA,QAASe,EADpB,EACoBA,KAEhCmB,EADgB1E,EAAO2E,MAAM,SAAA5E,GAAK,OAAIA,EAAMS,OAAS,EAAKmD,MAAM5D,SACxCQ,GAExBsD,EAAY,iEACLjC,mCADK,qEAGD8C,EAHC,wCAIYpC,EAAKnC,MAAMa,IAJvB,8CAKYsB,EAAKnC,MAAMc,IALvB,sCAMIsB,EAAOpC,MAAMa,IANjB,gCAOIuB,EAAOpC,MAAMc,IAPjB,gCAQIuB,EAAQrC,MAAMa,IARlB,gCASIwB,EAAQrC,MAAMc,IATlB,oBAURsC,GAEV,EAAKQ,SAAS,CAAEF,e,EAGlBpB,oBAAsB,WACpB,EAAKsB,SAAS,CAACR,KAAM,IACrB,EAAKkB,e,mFAlFL1D,KAAKmD,YAAYnD,KAAK4C,MAAME,a,iDAGHe,EAAWC,GAChC9D,KAAK4C,MAAME,YAAcgB,EAAUhB,WACrC9C,KAAKmD,YAAYW,EAAUhB,WAEzB9C,KAAK4C,MAAMJ,OAASsB,EAAUtB,MAChCxC,KAAK0D,gB,+BA8EL,OACE,6BAASvE,UAAU,QACf,kBAAC,EAAD,eACEE,SAAUW,KAAKX,SACfH,cAAec,KAAKd,cACpBgC,UAAWlB,KAAKkB,UAChBQ,oBAAqB1B,KAAK0B,qBACtB1B,KAAK4C,QAGX,kBAAC,EAAD,CACEL,OAAQvC,KAAK4C,MAAML,OACnBC,KAAMxC,KAAK4C,MAAMJ,KACjBC,eAAgBzC,KAAKyC,eACrBC,eAAgB1C,KAAK0C,sB,GApIdpC,IAAMC,WCDVwD,EAFM,kBAAM,8CC+DZC,G,iNA5DbpB,MAAQ,CACNqB,WAAW,EACXrC,MAAO,I,mFAGY,IAAD,OACVsC,EAAYlE,KAAKJ,MAAMuE,MAAMC,OAA7BF,QACFG,EAAQ,6CAAyCH,EAAzC,4DACdpD,MAAMuD,GACHtD,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAjB,GAAI,OAAI,EAAKkD,SAAS,CAAEpB,MAAO9B,EAAMmE,WAAW,OACrD9C,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,SAAUF,Q,+BAGhC,IACA6C,EAAcjE,KAAK4C,MAAnBqB,UADD,EAEiFjE,KAAK4C,MAAMhB,MAA3FC,EAFD,EAECA,MAAOyC,EAFR,EAEQA,cAAevC,EAFvB,EAEuBA,aAAc9C,EAFrC,EAEqCA,OAAQsF,EAF7C,EAE6CA,SAAUvC,EAFvD,EAEuDA,aAAcP,EAFrE,EAEqEA,QAEtE+C,EAAczC,EAAeA,EAAaG,UAAU,EAAG,GAAK,KAE5DuC,EAAkB,CAAEC,gBAAgB,uCAAD,OAAyCJ,EAAzC,MAEzC,OACE,yBAAKnF,UAAU,cAAf,IACE8E,EAAY,kBAAC,EAAD,MACR,6BACE,yBAAK9E,UAAU,cAAcwF,MAAOF,IACpC,yBAAKtF,UAAU,iBACb,4BACG0C,EACD,mCAAU2C,EAAV,OAEF,6BAASrF,UAAU,UAChBF,EAAOK,KAAI,SAACN,EAAO4F,GAAR,OACV,yBAAKrF,IAAKP,EAAMQ,IACd,8BAAOR,EAAMS,MACZmF,EAAQ3F,EAAO4F,OAAS,GACvB,0BAAM1F,UAAU,aAAhB,UAKR,sCAEE,8BAAO6C,IAET,uCAEE,wCAAUP,EAAV,UAEF,wCACA,2BAAI8C,U,GApDAjE,IAAMC,YCMXuE,EAPE,kBACf,6BACE,6EACA,kBAAC,IAAD,CAAM3C,GAAG,KAAT,qCCcW4C,EAbH,WACV,OACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWxC,IACjC,kBAAC,IAAD,CAAOuC,KAAK,kBAAkBC,UAAWnB,IACzC,kBAAC,IAAD,CAAOmB,UAAWL,OCFNM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpB,MACvB,2DCZNqB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/E,MAAK,SAAAgF,GACjCA,EAAaC,kB","file":"static/js/main.3cb7f73d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\nconst Header = () => (\n    <header>\n        <h1>Film Find</h1>\n    </header>\n)\n\nexport default Header;","import React from 'react';\nimport \"./Selection.css\";\n\nconst Selection = ({genre, genres, onGenreChange }) => (\n    <div className=\"selection\">\n      <label>Genre</label>\n      <select value={genre} onChange={onGenreChange}>\n        {genres.map( genre => (\n            <option key={genre.id} value={genre.name}>{genre.name}</option>\n        ))}\n      </select>\n    </div>\n  );\n\nexport default Selection;\n","import React from \"react\";\nimport InputRange from \"react-input-range\";\n\nimport 'react-input-range/lib/css/index.css';\nimport \"./Slider.css\"\n\nclass Slider extends React.Component {\n  onChange = range => {\n    this.props.onChange({\n      type: this.props.data.label,\n      value: range\n    });\n  }\n  render() {\n    const { min, max, step, value, label } = this.props.data;\n    return (\n      <div className=\"slider\">\n        <label>{label}</label>\n        <InputRange\n          minValue={min}\n          maxValue={max}\n          step={step}\n          onChange={this.onChange}\n          value={value}\n        />\n      </div>\n    )\n  }\n} \n\nexport default Slider;\n","import React from \"react\";\nimport \"./Button.css\"\n\nconst Button = ({ onClick, children }) => (\n  <div className=\"search-button\">\n    <button onClick={onClick}>\n      {children}\n    </button>\n  </div>\n)\n\nexport default Button;","import React from \"react\";\nimport \"./Navigation.css\";\nimport Selection from \"./Selection\";\nimport Slider from \"./Slider.js\"\nimport Button from \"./Button\";\n\nclass Navigation extends React.Component {\n    componentDidMount() {\n        const genresURL = `https://api.themoviedb.org/3/genre/movie/list?api_key=${process.env.REACT_APP_TMDB_API_KEY}&language=en-US`\n        fetch(genresURL)\n          .then(response => response.json())\n          .then(data => this.props.setGenres( data.genres ))\n          .catch(error => console.log(error));\n    }\n    \n    render() {\n        const { genre, genres, onGenreChange, onChange, year, rating, runtime } = this.props;\n        return (\n            <section className=\"navigation\">\n                <Selection\n                    genre={genre}\n                    genres={genres}\n                    onGenreChange={onGenreChange} \n                />\n\n                <Slider data={year} onChange={onChange} />\n                <Slider data={rating} onChange={onChange} />\n                <Slider data={runtime} onChange={onChange} />\n\n                <Button onClick={this.props.onSearchButtonClick}>\n                    Search\n                </Button>\n\n            </section>\n        )\n    }\n}\n\nexport default Navigation;","import React from \"react\";\nimport \"./MovieListItem.css\";\nimport { Link } from \"react-router-dom\";\n\nconst MovieListItem = ({ movie }) => {\n  const { id, title, poster_path, release_date, vote_average } = movie;\n  const imgUrl = `https://image.tmdb.org/t/p/w342/${poster_path}`;\n  const year = release_date.substring(0, 4);\n\n  return (\n    <li className=\"movie-item\">\n      <Link to={`/movie/${id}`} className=\"thumbnail\">\n        <img src={imgUrl} alt={title} />\n        <div className=\"movie-description\">\n          <h2>{title}</h2>\n            <section className=\"movie-details\">\n              <div className=\"movie-year\">\n                <span className=\"title\">Year</span>\n                <span>{year}</span>\n              </div>\n              <div className=\"movie-rating\">\n                <span className=\"title\">Rating</span>\n                <span>{vote_average}</span>\n              </div>\n            </section>\n        </div>\n      </Link>\n    </li>\n  );\n};\n\nexport default MovieListItem;","import React from \"react\";\nimport \"./Movies.css\";\nimport MovieListItem from \"./MovieListItem\";\nimport Button from \"../navigation/Button\";\n\nconst Movies = ({movies, page, onPageIncrease, onPageDecrease}) => (\n  <section>\n    <ul className=\"movies\">\n      {movies.map( movie => (\n        <MovieListItem key={movie.id} movie={movie} />\n      ))}\n    </ul>\n\n    <div className=\"pagination\">\n      <Button onClick={onPageDecrease}>Previous</Button>\n      <span>{`Page ${page}`}</span>\n      <Button onClick={onPageIncrease}>Next</Button>\n    </div>\n  </section>\n)\n\nexport default Movies;","import React from \"react\";\nimport \"./Main.css\"\nimport Navigation from \"./navigation/Navigation\";\nimport Movies from \"./movies/Movies\";\n\nclass Main extends React.Component {\n  state = {\n    movies: [],\n    total_pages: 1,\n    page: 1,\n    moviesUrl: `https://api.themoviedb.org/3/discover/movie?api_key=${process.env.REACT_APP_TMDB_API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1`,\n    genre: \"Comedy\",\n    genres: [],\n    year: {\n      label: \"year\",\n      min: 1990,\n      max: 2017,\n      step: 1,\n      value: { min: 2000, max: 2017 }\n    },\n    rating: {\n      label: \"rating\",\n      min: 0,\n      max: 10,\n      step: 1,\n      value: { min: 8, max: 10 }\n    },\n    runtime: {\n      label: \"runtime\",\n      min: 0,\n      max: 300,\n      step: 15,\n      value: { min: 60, max: 120 }\n    }\n}\n\ncomponentDidMount() {\n  this.fetchMovies(this.state.moviesUrl);\n}\n\nUNSAFE_componentWillUpdate(nextProps, nextState) {\n  if (this.state.moviesUrl !== nextState.moviesUrl) {\n    this.fetchMovies(nextState.moviesUrl);\n  }\n  if (this.state.page !== nextState.page) {\n    this.generateUrl();\n  }\n}\n\nonPageIncrease = () => {\n  const { page, total_pages } = this.state\n  const nextPage = page + 1;\n  if (nextPage <= total_pages) {\n    this.setState({ page: nextPage })\n  }\n}\n\nonPageDecrease = () => {\n  const nextPage = this.state.page - 1;\n  if ( nextPage > 0 ) {\n    this.setState({ page: nextPage })\n  }\n}\n\nonGenreChange = event => {\n  this.setState({ genre: event.target.value });\n}\n\nsetGenres = genres => {\n  this.setState({ genres });\n}\n\nonChange = data => {\n    this.setState({\n        [data.type]: {\n            ...this.state[data.type],\n            value: data.value\n        }\n    })\n}\n\nfetchMovies = (url) => {\n  fetch(url)\n    .then(response => response.json())\n    .then(data => this.storeMovies(data))\n    .catch(error => console.log(error));\n}\n\nstoreMovies = data => {\n  const movies = data.results.map( result => {\n    const  { vote_count, id, genre_ids, poster_path, title, vote_average, release_date } = result;\n    return { vote_count, id, genre_ids, poster_path, title, vote_average, release_date };\n  });\n\n  this.setState({ movies, total_pages: data.total_pages });\n}\n\ngenerateUrl = () => {\n  const {genres, year, rating, runtime, page } = this.state;\n  const selectedGenre = genres.find( genre => genre.name === this.state.genre);\n  const genreId = selectedGenre.id;\n\n  const moviesUrl = `https://api.themoviedb.org/3/discover/movie?` +\n    `api_key=${process.env.REACT_APP_TMDB_API_KEY}&` +\n    `language=en-US&sort_by=popularity.desc&` +\n    `with_genres=${genreId}&` +\n    `primary_release_date.gte=${year.value.min}-01-01&` +\n    `primary_release_date.lte=${year.value.max}-12-31&` +\n    `vote_average.gte=${rating.value.min}&` +\n    `vote_average.lte=${rating.value.max}&` +\n    `with_runtime.gte=${runtime.value.min}&` +\n    `with_runtime.lte=${runtime.value.max}&` +\n    `page=${page}`;\n\n  this.setState({ moviesUrl });\n}\n\nonSearchButtonClick = () => {\n  this.setState({page: 1});\n  this.generateUrl();\n}\n\n  render() {\n    return (\n      <section className=\"main\">\n          <Navigation\n            onChange={this.onChange}\n            onGenreChange={this.onGenreChange}\n            setGenres={this.setGenres}\n            onSearchButtonClick={this.onSearchButtonClick}\n            {...this.state}\n          />\n\n          <Movies\n            movies={this.state.movies}\n            page={this.state.page}\n            onPageIncrease={this.onPageIncrease}\n            onPageDecrease={this.onPageDecrease}\n          />\n      </section>\n    )\n  }\n}\n\nexport default Main;","import React from \"react\";\n\nconst LoadingMovie = () => <h2>Loading Movie</h2>\n\nexport default LoadingMovie;","import React from \"react\";\nimport LoadingMovie from \"./LoadingMovie\";\nimport \"./Movie.css\"\n\nclass Movie extends React.Component {\n  state = {\n    isLoading: true,\n    movie: {}\n  }\n\n  componentDidMount() {\n    const { movieId } = this.props.match.params;\n    const movieUrl = `https://api.themoviedb.org/3/movie/${movieId}?api_key=651925d45022d1ae658063b443c99784&language=en-US`;\n    fetch(movieUrl)\n      .then(response => response.json())\n      .then(data => this.setState({ movie: data, isLoading: false }))\n      .catch(error => console.log(\"Error:\", error));\n  }\n\n  render() {\n    const { isLoading } = this.state;\n    const { title, backdrop_path, release_date, genres, overview, vote_average, runtime } = this.state.movie;\n\n    const releaseYear = release_date ? release_date.substring(0, 4) : null;\n\n    const backgroundStyle = { backgroundImage: `url(http://image.tmdb.org/t/p/w1280/${backdrop_path})` };\n\n    return (\n      <div className=\"movie-page\"> { \n        isLoading ? <LoadingMovie />\n          : <div>\n              <div className=\"movie-image\" style={backgroundStyle} />\n              <div className=\"movie-details\">\n                <h1>\n                  {title}\n                  <span> ({ releaseYear }) </span>\n                </h1>\n                <section className=\"genres\">\n                  {genres.map((genre, index) => (\n                    <div key={genre.id}>\n                      <span>{genre.name}</span>\n                      {index < genres.length - 1 && (\n                        <span className=\"separator\">|</span>\n                      )}\n                    </div>\n                  ))}\n                </section>\n                <h5>\n                  Rating:\n                  <span>{vote_average}</span>\n                </h5>\n                <h5>\n                  Runtime:\n                  <span>{`${runtime} min`}</span>\n                </h5>\n                <h4>Overview</h4>\n                <p>{overview}</p>\n              </div>\n            </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default Movie;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst NotFound = () => (\n  <div>\n    <h3>We couldn't find what you were looking for :(</h3>\n    <Link to=\"/\">Here you can browse some movies</Link>\n  </div>\n);\n\nexport default NotFound;","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\"\nimport Header from \"./header/Header\";\nimport Main from \"./main/Main\";\nimport Movie from \"./movie/Movie\";\nimport NotFound from \"./NotFound\";\n\nconst App = () => {\n  return (\n    <HashRouter basename='/'>\n      <div>\n        <Header />\n        <Route exact path='/' component={Main} />\n        <Route path=\"/movie/:movieId\" component={Movie} />\n        <Route component={NotFound} />\n      </div>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}